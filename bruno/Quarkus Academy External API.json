{
  "name": "Quarkus Academy External API",
  "version": "1",
  "items": [
    {
      "type": "http",
      "name": "All users",
      "seq": 1,
      "request": {
        "url": "http://localhost:8080/api/users",
        "method": "GET",
        "headers": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "test(\"res.status should be 200\", function() {\nexpect(res.getStatus()).to.equal(200);\n});\n\ntest(\"res.body should contain 2 users\", function() {\nconst data = res.getBody();\nexpect(data.length).to.equal(2);\n});",
        "auth": {
          "mode": "none"
        },
        "query": []
      }
    },
    {
      "type": "http",
      "name": "Get existing user without birth date",
      "seq": 2,
      "request": {
        "url": "http://localhost:8080/api/users/3?omit-birthdate=true",
        "method": "GET",
        "headers": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "test(\"res.status should be 200\", function() {\nexpect(res.getStatus()).to.equal(200);\n});\n\ntest(\"res.body should contain 1 user without birthdate\", function() {\nconst data = res.getBody();\nexpect(Array.isArray(data)).to.equal(false);\nexpect(Object.keys(data).length).to.equal(3);\nexpect(data.id).to.equal(\"3\");\nexpect(data.name).to.equal(\"Adam\");\nexpect(data.surname).to.equal(\"Seidel\");\n});",
        "auth": {
          "mode": "none"
        },
        "query": [
          {
            "name": "omit-birthdate",
            "value": "true",
            "enabled": true
          }
        ]
      }
    },
    {
      "type": "http",
      "name": "Get user server error",
      "seq": 4,
      "request": {
        "url": "http://localhost:8080/api/users/1",
        "method": "GET",
        "headers": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "test(\"res.status should be 500\", function() {\nexpect(res.getStatus()).to.equal(500);\n});",
        "auth": {
          "mode": "none"
        },
        "query": []
      }
    },
    {
      "type": "http",
      "name": "Get user Unauthorized",
      "seq": 5,
      "request": {
        "url": "http://localhost:8080/api/users/2",
        "method": "GET",
        "headers": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "test(\"res.status should be 401\", function() {\nexpect(res.getStatus()).to.equal(401);\n});",
        "auth": {
          "mode": "none"
        },
        "query": []
      }
    },
    {
      "type": "http",
      "name": "Create user",
      "seq": 6,
      "request": {
        "url": "http://localhost:8080/api/users",
        "method": "POST",
        "headers": [],
        "body": {
          "mode": "json",
          "json": "{\n  \"name\": \"Adam\",\n  \"surname\": \"Seidel\",\n  \"birthDate\": \"1990-01-01\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "test(\"res.status should be 201\", function() {\nexpect(res.getStatus()).to.equal(201);\n});\n\ntest(\"res.body should contain created user\", function() {\nconst data = res.getBody();\nexpect(Array.isArray(data)).to.equal(false);\nexpect(Object.keys(data).length).to.equal(4);\nexpect(data.id).to.equal(\"some-id\");\nexpect(data.name).to.equal(\"Adam\");\nexpect(data.surname).to.equal(\"Seidel\");\nexpect(data.birthDate).to.equal(\"1990-01-01\");\n});",
        "auth": {
          "mode": "none"
        },
        "query": []
      }
    },
    {
      "type": "http",
      "name": "Update user",
      "seq": 7,
      "request": {
        "url": "http://localhost:8080/api/users",
        "method": "PUT",
        "headers": [],
        "body": {
          "mode": "json",
          "json": "{\n  \"id\": \"some-id\",\n  \"name\": \"Adam\",\n  \"surname\": \"Seidel\",\n  \"birthDate\": \"1991-01-01\"\n}",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "test(\"res.status should be 200\", function() {\nexpect(res.getStatus()).to.equal(200);\n});\n\ntest(\"res.body should contain updated user\", function() {\nconst data = res.getBody();\nexpect(Array.isArray(data)).to.equal(false);\nexpect(Object.keys(data).length).to.equal(4);\nexpect(data.id).to.equal(\"some-id\");\nexpect(data.name).to.equal(\"Adam\");\nexpect(data.surname).to.equal(\"Seidel\");\nexpect(data.birthDate).to.equal(\"1991-01-01\");\n});",
        "auth": {
          "mode": "none"
        },
        "query": []
      }
    },
    {
      "type": "http",
      "name": "Delete user",
      "seq": 8,
      "request": {
        "url": "http://localhost:8080/api/users/1",
        "method": "DELETE",
        "headers": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "test(\"res.status should be 204\", function() {\nexpect(res.getStatus()).to.equal(204);\n});\n",
        "auth": {
          "mode": "none"
        },
        "query": []
      }
    },
    {
      "type": "http",
      "name": "Get existing user with birth date",
      "seq": 3,
      "request": {
        "url": "http://localhost:8080/api/users/3",
        "method": "GET",
        "headers": [],
        "body": {
          "mode": "none",
          "formUrlEncoded": [],
          "multipartForm": []
        },
        "script": {},
        "vars": {},
        "assertions": [],
        "tests": "test(\"res.status should be 200\", function() {\nexpect(res.getStatus()).to.equal(200);\n});\n\ntest(\"res.body should contain 1 user without birthdate\", function() {\nconst data = res.getBody();\nexpect(Array.isArray(data)).to.equal(false);\nexpect(Object.keys(data).length).to.equal(4);\nexpect(data.id).to.equal(\"3\");\nexpect(data.name).to.equal(\"Adam\");\nexpect(data.surname).to.equal(\"Seidel\");\nexpect(data.birthDate).to.equal(\"1990-01-01\");\n});",
        "auth": {
          "mode": "none"
        },
        "query": []
      }
    }
  ],
  "environments": [],
  "brunoConfig": {
    "version": "1",
    "name": "Quarkus Academy External API",
    "type": "collection",
    "ignore": [
      "node_modules",
      ".git"
    ]
  }
}